/* eslint-disable no-console */
import algosdk from 'algosdk'
import { ReactNode, useState } from 'react'
import { {{ className }}, {{ className }}Client } from '{{ clientPath }}'

/* Example usage
<{{ className }}{{ methodName | capitalize}}
  algodClient={algodClient}
  appID={appID}
  buttonClass="btn m-2"
  buttonLoadingNode=<span className="loading loading-spinner" />
  buttonNode="Call {{ methodName }}"
  typedClient={typedClient}
  {%- for arg in args %}
  {{ arg }}={% raw %}{{% endraw %}{{ arg }}{% raw %}}{% endraw %}
  {%- endfor %}
/>
*/
{% if args | length -%}
type {{ className }}{{ methodName | capitalize}}Args = Dao['methods']['{{ methodSignature }}']['argsObj']

{% endif -%}
type Props = {
  algodClient: algosdk.Algodv2
  appID: number
  buttonClass: string
  buttonLoadingNode?: ReactNode
  buttonNode: ReactNode
  typedClient: {{ className }}Client
  {%- if returnType !== 'void' %}
  returnCallback?: (returnValue: Dao['methods']['{{ methodSignature }}']['returns']) => void
  {%- endif %}
  {%- for arg in args %}
  {{ arg }}: {{ className }}{{ methodName | capitalize}}Args['{{ arg }}']
  {%- endfor %}
}

const {{ className }}{{ methodName | capitalize}} = (props: Props) => {
  const [loading, setLoading] = useState<boolean>(false)

  const callMethod = async () => {
    setLoading(true)
    console.log(`Calling {{ methodName }}`)
    {% if returnType !== 'void' %}const result = {% endif -%}await props.typedClient.{{ methodName }}({% raw %}{{% endraw %}
    {%- for arg in args %}
      {{ arg }}: props.{{ arg }},
    {%- endfor %}
    {% raw %}}{% endraw %})
    {% if returnType !== 'void' %}
    if (props.returnCallback) {
      props.returnCallback(result)
    }
    {% endif %}
    setLoading(false)
  }

  {% raw %}return (
    <button className={props.buttonClass} onClick={callMethod}>
      {loading ? props.buttonLoadingNode || props.buttonNode : props.buttonNode}
    </button>
  ){% endraw %}
}

export default {{ className }}{{ methodName | capitalize }}