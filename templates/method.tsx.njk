/* eslint-disable no-console */
import { ReactNode, useState } from 'react'
import { {{ className }}, {{ className }}Client } from '../contracts/DaoClient'
import { useWallet } from '@txnlab/use-wallet'

/* Example usage
<{{ fullName }}
  buttonClass="btn m-2"
  buttonLoadingNode={% raw %}{{% endraw %}<span className="loading loading-spinner" />{% raw %}}{% endraw %}
  buttonNode="Call {{ methodName }}"
  typedClient={typedClient}
  {%- for arg in args %}
  {{ arg }}={% raw %}{{% endraw %}{{ arg }}{% raw %}}{% endraw %}
  {%- endfor %}
/>
*/
{% if args | length -%}
type {{ fullName }}Args = Dao['methods']['{{ methodSignature }}']['argsObj']

{% endif -%}
type Props = {
  buttonClass: string
  buttonLoadingNode?: ReactNode
  buttonNode: ReactNode
  typedClient: {{ className }}Client
  {%- for arg in args %}
  {{ arg }}: {{ fullName }}Args['{{ arg }}']
  {%- endfor %}
}

const {{ fullName }} = (props: Props) => {
  const [loading, setLoading] = useState<boolean>(false)
  const { activeAddress, signer } = useWallet()
  const sender = {% raw %}{ signer, addr: activeAddress! }{% endraw %}

  const callMethod = async () => {
    setLoading(true)
    console.log(`Calling {{ methodName }}`)
    await props.typedClient.{% if isCreate %}create.{% endif %}{{ methodName }}(
    {%- if args | length > 0%}
      {% raw %}{{% endraw %}
      {%- for arg in args %}
        {{ arg }}: props.{{ arg }},
      {%- endfor %}
      {% raw %}},
      { sender },{% endraw %}
    {%- else %}
      {% raw %}{},
      { sender },{% endraw %}
    {%- endif %}
    )
    setLoading(false)
  }

  {% raw %}return (
    <button className={props.buttonClass} onClick={callMethod}>
      {loading ? props.buttonLoadingNode || props.buttonNode : props.buttonNode}
    </button>
  ){% endraw %}
}

export default {{ fullName }}